version: 2.1
#orbs:
#  python: circleci/python@2
## Define custom commands for this config
## See https://circleci.com/docs/reusing-config/#authoring-reusable-commands
#commands:
#  check-python:
#    steps:
#      - run:
#          command: source ./venv/bin/activate && python3 --version
#          name: Check Python version
#      - run:
#          command: source ./venv/bin/activate && pip3 --version
#          name: Check Pip version
#  install-venv:
#    steps:
#      - run:
#          command: python3 -m venv ./venv && source ./venv/bin/activate && pip3 install -r requirements.txt
#          name: Enter virtual env and install dependencies
#
#
## Define custom jobs for this config
## See: https://circleci.com/docs/jobs-steps/
#jobs:
#  run-unit-tests:
#    machine: # Executor type
#      # For a full list of Linux VM execution environments, see
#      # https://circleci.com/developer/images?imageType=machine
#      image: ubuntu-2204:2023.07.2
#    steps:
#      - checkout      # Check out the code in the project directory
#      - install-venv
#      - check-python  # Invoke command "check-python" after entering venv
#      - run:
#          command: source ./venv/bin/activate && pytest -s
#          name: Test rag unit tests
## For use in part 2 of the tutorial - uncomment to use
## See https://circleci.com/blog/deploy-reevaluate-llm-apps-langsmith/
##  run-nightly-tests:
##    machine: # Executor type
##      # For a full list of Linux VM execution environments, see
##      # https://circleci.com/developer/images?imageType=machine
##      image: ubuntu-2204:2023.07.2
##    steps:
##      - checkout      # Check out the code in the project directory
##      - install-venv
##      - check-python  # Invoke command "check-python" after entering venv
##      - run:
##          command: source ./venv/bin/activate && pytest -s
##          name: Run nightly tests
##  deploy:
##    # For running on CircleCI's self-hosted runners
##    machine: true
##    resource_class: user/sample-project # TODO add self-hosted runner resource class details
##    steps:
##      - checkout
##      - install-venv
##      - check-python  # Invoke command "check-python" after entering venv
##     - run:
##          command: timeout --preserve-status --foreground 90 bash -c "source ./venv/bin/activate ; flask --app rag/app run" || true  # Run the server for 90 seconds to test
##          name: Deploy application on self-hosted runner
#
## Invoke jobs via workflows
## See: https://circleci.com/docs/workflows/
#workflows:
#  integration-tests:
#    jobs:
#      - run-unit-tests:
#          context: rag-context  # This contains environment variables (https://circleci.com/docs/contexts/)
#          filters:
#            branches:
#              only:
#                - main # Only run the job when this branch is updated
## For use in part 2 of the tutorial - uncomment to use
## See https://circleci.com/blog/deploy-reevaluate-llm-apps-langsmith/
##  deployment-tests:
##    # Trigger on a schedule or when retrain branch is updated
##    triggers:
##      - schedule:
##          cron: "0 0 * * *" # Daily at midnight
##          filters:
##            branches:
##              only:
##                - main
##    jobs:
##      - run-nightly-tests:
##          context: rag-context  # This contains environment variables
##      - hold: # A job that will require manual approval in the CircleCI web application.
##          requires:
##            - run-nightly-tests
##          type: approval # This key-value pair will set your workflow to a status of "On Hold"
##      - deploy:
##          context: rag-context  # This contains environment variables
##          requires:
##            - hold
## This config was automatically generated from your source code
## Stacks detected: deps:python:.,file:setup.py:.

orbs:
  # The python orb contains a set of prepackaged circleci configuration you can use repeatedly in your configurations files
  # Orb commands and jobs help you with common scripting around a language/tool
  # so you dont have to copy and paste it everywhere.
  # See the orb documentation here: https://circleci.com/developer/orbs/orb/circleci/python
  python: circleci/python@2.1.1

workflows:
  sample: # This is the name of the workflow, feel free to change it to better match your workflow.
    # Inside the workflow, you define the jobs you want to run.
    # For more details on extending your workflow, see the configuration docs: https://circleci.com/docs/2.0/configuration-reference/#workflows
    jobs:
      - build-and-test


jobs:
  build-and-test: # This is the name of the job, feel free to change it to better match what you're trying to do!
    # These next lines defines a docker executors: https://circleci.com/docs/2.0/executor-types/
    # You can specify an image from dockerhub or use one of the convenience images from CircleCI's Developer Hub
    # A list of available CircleCI docker convenience images are available here: https://circleci.com/developer/images/image/cimg/python
    # The executor is the environment in which the steps below will be executed - below will use a python 3.9 container
    # Change the version below to your required version of python
    docker:
      - image: cimg/python:3.10.5
    # Checkout the code as the first step. This is a dedicated CircleCI step.
    # The python orb's install-packages step will install the dependencies from a Pipfile via Pipenv by default.
    # Here we're making sure we use just use the system-wide pip. By default it uses the project root's requirements.txt.
    # Then run your tests!
    # CircleCI will report the results back to your VCS provider.
    steps:
      - checkout
      - python/install-packages:
          pkg-manager: pip
          # app-dir: ~/project/package-directory/  # If your requirements.txt isn't in the root directory.
          # pip-dependency-file: test-requirements.txt  # if you have a different name for your requirements file, maybe one that combines your runtime and test requirements.
      - run:
          name: Run tests
          # This assumes pytest is installed via the install-package step above
          command: pytest -s